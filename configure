#!/bin/bash

BASENAME=$(basename $0)
CWD=$(dirname $0)
PREFIX=/usr
DEBUG=no
APP_NAME=nulloy

FORCE_VERSION=no
BUILD_GSTREAMER=yes
BUILD_GSTREAMER_TAGREADER=no
BUILD_TAGLIB=yes
BUILD_VLC=no
BUILD_PHONON=no
BUILD_TESTS=no
UPDATE_CHECK=yes
SUPPORT_SKINS=yes
MAC_UNIVERSAL=no

echo_err() {
    echo "$BASENAME: $@" >&2
}

echo_help() {
    echo "Usage:  $BASENAME [options]"
    echo '    --no-gstreamer              do not build GStreamer plugin'
    echo '    --gstreamer-tagreader       include TagReader in GStreamer plugin'
    echo '    --vlc                       build VLC plugin'
    echo '    --phonon                    build Phonon plugin'
    echo '    --no-taglib                 do not build TagLib plugin'
    echo '    --no-skins                  disable skins support'
    echo '    --force-version VERSION     overrides version.pri'
    echo '    --no-update-check           disable online check functionality'
    echo '    --prefix PREFIX             installation prefix (ignored on Mac)'
    echo '    --universal                 build for both i386 and x86_64 (Mac only)'
    echo '    --debug                     build in debug mode'
    echo '    --tests                     build unit tests'
}

echo_try() {
    echo
    echo "Try \`$BASENAME --help' for more information"
}

while test $# -gt 0; do
    case "$1" in
        --prefix)
            shift
            if command -v realpath &> /dev/null && -d $(dirname "$1"); then
                PREFIX=$(realpath "$1")
            else
                PREFIX=$(readlink -m "$1")
            fi
            ;;
        --debug)
            DEBUG=yes ;;
        --force-version)
            shift; FORCE_VERSION=$1 ;;
        --no-gstreamer)
            BUILD_GSTREAMER=no ;;
        --gstreamer-tagreader)
            BUILD_GSTREAMER_TAGREADER=yes ;;
        --vlc)
            BUILD_VLC=yes ;;
        --phonon)
            BUILD_PHONON=yes ;;
        --no-taglib)
            BUILD_TAGLIB=no ;;
        --tests)
            BUILD_TESTS=yes ;;
        --no-skins)
            SUPPORT_SKINS=no ;;
        --no-update-check)
            UPDATE_CHECK=no ;;
        --universal)
            MAC_UNIVERSAL=yes ;;
        --help|-h)
            echo_help; exit 0 ;;
        *)
            echo_err "invalid argument: $1"
            echo_try; exit 1
            ;;
    esac
    shift
done

QMAKE_CACHE=$CWD/.qmake.cache
echo -n > $QMAKE_CACHE

check_executable() {
    VARNAME="$1"
    DEFVALUE="$2"
    CURVALUE=""
    OUTVALUE=""

    echo -n "checking for $DEFVALUE: "

    if [[ -z "${!VARNAME}" ]]; then
        eval ${VARNAME}="$DEFVALUE"
    fi
    CURVALUE="${!VARNAME}"

    if [[ ! -f "$CURVALUE" ]]; then
        OUTVALUE=$(which "$CURVALUE" 2>/dev/null)
        if [[ -z "$OUTVALUE" ]]; then
            echo "no"
            echo "$BASENAME: Unable to find \`$CURVALUE'. Check the PATH environment variable or try \`$VARNAME=/path/to/$CURVALUE $0'"
            exit 1
        fi
    else
        OUTVALUE="$CURVALUE"
    fi

    echo "$OUTVALUE"
}
check_executable QMAKE qmake
check_executable LRELEASE lrelease
echo "LRELEASE = $LRELEASE" >> $QMAKE_CACHE
check_executable PKG_CONFIG pkg-config
echo "PKG_CONFIG = $PKG_CONFIG" >> $QMAKE_CACHE

if uname | grep -i darwin; then
    macos_cxx_std='-stdlib=libc++'
    if [[ $CXXFLAGS != *"$macos_cxx_std"* ]]; then
        CXXFLAGS="$CXXFLAGS $macos_cxx_std"
    fi
    #macos_cxx_stdlib='-std=libc++'
    #if [[ $CXXFLAGS != *"$macos_cxx_stdlib"* ]]; then
        #CXXFLAGS="$CXXFLAGS $macos_cxx_stdlib"
    #fi
fi

[[ -n "$CFLAGS" ]]   && echo "QMAKE_CFLAGS += ${CFLAGS}"     >> $QMAKE_CACHE
[[ -n "$CXXFLAGS" ]] && echo "QMAKE_CXXFLAGS += ${CXXFLAGS}" >> $QMAKE_CACHE
[[ -n "$LDFLAGS" ]]  && echo "QMAKE_LFLAGS += ${LDFLAGS}"    >> $QMAKE_CACHE

pkg_check_lib() {
    if $PKG_CONFIG --print-errors $1; then
        echo "Found $1"
    else
        echo
        exit 1
    fi
}

[[ $BUILD_GSTREAMER == "yes" ]]           && pkg_check_lib gstreamer-1.0
[[ $BUILD_GSTREAMER_TAGREADER == "yes" ]] && pkg_check_lib gstreamer-pbutils-1.0
[[ $BUILD_VLC == "yes" ]]                 && pkg_check_lib libvlc
[[ $BUILD_TAGLIB == "yes" ]]              && pkg_check_lib taglib
[[ $BUILD_PHONON == "yes" ]]              && pkg_check_lib phonon

[[ $BUILD_GSTREAMER == "yes" ]]           && echo "CONFIG += gstreamer" >> $QMAKE_CACHE
[[ $BUILD_GSTREAMER_TAGREADER == "yes" ]] && echo "CONFIG += gstreamer-tagreader" >> $QMAKE_CACHE
[[ $BUILD_VLC == "yes" ]]                 && echo "CONFIG += vlc" >> $QMAKE_CACHE
[[ $BUILD_PHONON == "yes" ]]              && echo "CONFIG += phonon" >> $QMAKE_CACHE
[[ $BUILD_TAGLIB == "yes" ]]              && echo "CONFIG += taglib" >> $QMAKE_CACHE
[[ $SUPPORT_SKINS == "no" ]]              && echo "CONFIG += no-skins" >> $QMAKE_CACHE
[[ $MAC_UNIVERSAL == "yes" ]]             && echo "CONFIG += x86 x86_64" >> $QMAKE_CACHE
[[ $UPDATE_CHECK == "no" ]]               && echo "CONFIG += no-update-check" >> $QMAKE_CACHE
[[ $BUILD_TESTS == "yes" ]]               && echo "CONFIG += tests" >> $QMAKE_CACHE \
                                          && echo "DEFINES += _TESTS_" >> $QMAKE_CACHE
if [[ $DEBUG == "yes" ]]; then
    echo "CONFIG += debug" >> $QMAKE_CACHE
else
    echo "CONFIG += release" >> $QMAKE_CACHE
fi

if $QMAKE -query "QMAKE_MKSPECS" | grep -i mingw; then
    echo "CONFIG += unix_mingw" >> $QMAKE_CACHE
    APP_NAME=Nulloy
fi

echo
if [[ $FORCE_VERSION != "no" ]]; then
    echo "Forced version: $FORCE_VERSION"
    echo "N_CONFIG_FORCE_VERSION = $FORCE_VERSION" >> $QMAKE_CACHE
fi

if uname | grep -i darwin; then
    QMAKE_EXTRA_OPTIONS="-spec macx-g++"
    APP_NAME=Nulloy
    QMAKE_CC=clang
    QMAKE_CXX=clang++
    echo "QMAKE_CC  = $QMAKE_CC" >> $QMAKE_CACHE
    echo "QMAKE_CXX = $QMAKE_CXX" >> $QMAKE_CACHE
    echo "QMAKE_EXTRA_OPTIONS = $QMAKE_EXTRA_OPTIONS" >> $QMAKE_CACHE
else
    echo "Install prefix: $PREFIX"
fi
echo "PREFIX = $PREFIX" >> $QMAKE_CACHE

echo "N_CONFIG_SUCCESS = yes" >> $QMAKE_CACHE

echo "APP_NAME = $APP_NAME" >> $QMAKE_CACHE

echo
echo "Running qmake..."
if ! $QMAKE $QMAKE_EXTRA_OPTIONS; then
    echo_err "qmake failed"
    exit 1
fi

echo "Nulloy has been configured. Now run \`make'."
